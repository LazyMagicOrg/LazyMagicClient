using LazyMagic.Client.ModelGenerator;
using Microsoft.CodeAnalysis;
using System.Data;

namespace LazyMagic.LzModelGenerator;


// Example1:
// namespace MyNamespace;
// [LzModelValidator("Yada")]
//
// Generated: YadaModelValidator.cs
// namespace MyNamespace;   
// public partial class YadaModelValidator : AbstractValidator<YadaModel>   
// {
//     public YadaModelValidator() 
//     {    
//         Include(new YadaValidator());
//     }
// }
//
// Example2:
// namespace MyNamespace;
// [LzModelValidator("Yada", false)]
//
// Generated: YadaModelValidator.cs
// namespace MyNamespace;   
// public partial class YadaModelValidator : AbstractValidator<YadaModel>   
// {
// }

[Generator]
public class LazyMagicModelGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        //// Register a syntax receiver that will look for classes marked with the FeatureAttribute
        //context.RegisterForSyntaxNotifications(() => new LzModelValidatorSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        //if (!(context.SyntaxReceiver is LzModelValidatorSyntaxReceiver lzModelValidatorReceiver))
        //    return;

        try
        {
            foreach (var syntaxTree in context.Compilation.SyntaxTrees)
            {
                var model = context.Compilation.GetSemanticModel(syntaxTree);
                var classesWithFactoryAttribute = syntaxTree.GetRoot()
                    .DescendantNodes()
                    .OfType<ClassDeclarationSyntax>()
                    .Where(x => model.GetDeclaredSymbol(x)!.GetAttributes().Any(a => a.AttributeClass!.Name == nameof(LzModelValidatorAttribute)));


                //foreach (var classDecl in lzModelValidatorReceiver.AnnotatedClasses)
                foreach (var classDecl in classesWithFactoryAttribute)
                {
                var modelAttribute = classDecl.AttributeLists
                    .SelectMany(a => a.Attributes)
                    .FirstOrDefault(a => a.Name.ToString().EndsWith("LzModelValidator"));

                if (modelAttribute == null || modelAttribute.ArgumentList?.Arguments.Count < 1)
                    continue;

                var args = modelAttribute.ArgumentList.Arguments;
                var baseClassName = args[0].Expression.ToString().Trim('"');
                var includeDTO = args.Count > 1 ? args[1].Expression.ToString().Trim('"').Equals("true") : true;    
                    
                var namespaceName = GetNamespace(context, model, classDecl);

                    var includeDTOsource = includeDTO ? @$"
    public {baseClassName}ModelValidator()
    {{
      Include(new {baseClassName}Validator());
    }}"
        : "";
                    var source = @$"
// <auto-generated> //
namespace {namespaceName};
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
public partial class {baseClassName}ModelValidator : AbstractValidator<{baseClassName}>
{{
{includeDTOsource}
}}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
";
                    context.AddSource($"{baseClassName}ModelValidator.g.cs", source);
                }
            }
        }
        catch (Exception ex)
        {
            var diagnostic = Diagnostic.Create(_messageRule, Location.None, ex.Message + "01");
            context.ReportDiagnostic(diagnostic);
        }
    }

    private static string GetNamespace(GeneratorExecutionContext context, SemanticModel model, ClassDeclarationSyntax classNode)
    {
        var namespaceName = string.Empty;

        var classSymbol = model.GetDeclaredSymbol(classNode) as INamedTypeSymbol;

        if (classSymbol != null)
            namespaceName = classSymbol.ContainingNamespace.ToString();
        else
        {
            var diagnostic = Diagnostic.Create(_messageRule, Location.None, "Namespace not found.");
            context.ReportDiagnostic(diagnostic);
        }
        return namespaceName;
    }

    private static readonly DiagnosticDescriptor _messageRule = new(
        id: "LZI0002",
        title: "LazyMagic.Client.LzModelValidatorGenerator Source Generator Message",
        messageFormat: "{0}",
        category: "SourceGenerator",
        defaultSeverity: DiagnosticSeverity.Warning,
        isEnabledByDefault: true);
    private static void Log(GeneratorExecutionContext context, string? message)
    {
        if (message == null) return;
        string[] lines = message.Split(new[] { '\n' }, StringSplitOptions.None);
        foreach (var line in lines)
        {
            var diagnostic = Diagnostic.Create(_messageRule, Location.None, line);
            context.ReportDiagnostic(diagnostic);
        }
    }
}