
@namespace BlazorizeTest.WASM
@inject IJSRuntime JSRuntime
@inject ILzHost Host
@inject HttpClient HttpClient
@inject ILzClientConfig ClientConfig
@inject IOSAccess OSAccess
@inject IBlazorInternetConnectivity InternetConnectivity
@inject ILzMessages Messages

@if(ClientConfig.Configured) {
    <Blazorise.ThemeProvider Theme="@theme">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </Blazorise.ThemeProvider>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        if (!ClientConfig.Configured)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("setAssetHostUrl", Host.AssetsUrl);

                // We initialize the following because the DI container doens't have access
                // to the JSRuntime until the first render in MAUI.
                InternetConnectivity.SetJSRuntime(JSRuntime);
                var staticAssets = new BlazorStaticAssets(new HttpClient());
                Messages.SetStaticAssets(staticAssets);

                await ClientConfig.ReadAuthConfigAsync(Host.RemoteApiUrl + "config");

                // The following extension methods add to the Mesaages.MessageFiles list
                Messages
                    .AddLazyMagicBlazorMessages()
                    .AddLazyMagicBlazoriseComponentsAuthMessages()
                    ;
                Messages.MessageFiles.AddRange([Host.AssetsUrl + "Tenancy/SetsApp-en-US/Messages.json"]);

                // Read message files for the current culture and configure for current units
                await Messages.SetMessageSetAsync("en-US", LzMessageUnits.Imperial);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        await base.OnInitializedAsync();
    }



    private Theme theme = new()
        {
            // BarOptions = new()
            // {
            //     HorizontalHeight = "72px"
            // },
            // ColorOptions = new()
            // {
            //     Primary = "#0288D1",
            //     Secondary = "#A65529",
            //     Success = "#23C02E",
            //     Info = "#9BD8FE",
            //     Warning = "#F8B86C",
            //     Danger = "#F95741",
            //     Light = "#F0F0F0",
            //     Dark = "#535353",
            // },
            // BackgroundOptions = new()
            // {
            //     Primary = "#0288D1",
            //     Secondary = "#A65529",
            //     Success = "#23C02E",
            //     Info = "#9BD8FE",
            //     Warning = "#F8B86C",
            //     Danger = "#F95741",
            //     Light = "#F0F0F0",
            //     Dark = "#535353",
            // },
            // InputOptions = new()
            // {
            //     CheckColor = "#0288D1",
            // }
        };
}